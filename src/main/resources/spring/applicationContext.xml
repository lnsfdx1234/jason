<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<description>Spring公共配置</description>

<!-- 读取资源文件 -->
	<context:property-placeholder ignore-unresolvable="true" local-override="true" location="classpath*:config/application*.properties" />

	<util:properties id="APP_PROPERTIES" location="classpath:config/application.properties" local-override="true" />

<!-- 采用c3p0数据源 
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialPoolSize" value="${love.initialPoolSize}"></property>
		<property name="minPoolSize" value="${love.minPoolSize}"></property>
		<property name="maxPoolSize" value="${love.maxPoolSize}"></property>
		<property name="maxIdleTime" value="${love.maxIdleTime}"></property>
		<property name="acquireIncrement" value="${love.acquireIncrement}"></property>
		<property name="idleConnectionTestPeriod" value="${love.idleConnectionTestPeriod}"></property>
		<property name="acquireRetryAttempts" value="${love.acquireRetryAttempts}"></property>
		<property name="breakAfterAcquireFailure" value="${love.breakAfterAcquireFailure}"></property>
		<property name="maxStatements" value="${love.maxStatements}"></property>
		<property name="testConnectionOnCheckout" value="${love.testConnectionOnCheckout}"></property>
	</bean> --> 
	
	<!-- 数据源配置, 使用DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接Idle一个小时后超时 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>
	
<!-- 连接工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.hzbank.activiti.entity" />  
		<property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>  
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>  
                <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>  
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>  
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>  
  
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>  
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>  
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>  
                <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>  
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>  
            </props>  
        </property>  
	</bean>
	
<!-- 开启AOP监听 只对当前配置文件有效 -->  
    <aop:aspectj-autoproxy expose-proxy="true" />  
    
<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    
<!-- 事务处理 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">  
        <tx:attributes>  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="create*" propagation="REQUIRED" />  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="merge*" propagation="REQUIRED" />  
            <tx:method name="del*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="put*" propagation="REQUIRED" />  
            <tx:method name="use*" propagation="REQUIRED" />  
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="*" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  
    <aop:config expose-proxy="true">  
<!-- 只对业务逻辑层实施事务 -->  
        <aop:pointcut id="txPointcut"  expression="execution(* com.hzbank..service..*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />  
    </aop:config>  

	
<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.hzbank.activiti">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	
<!-- Activiti begin -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="txManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />
		<property name="history" value="full" />
		<property name="processDefinitionCacheLimit" value="10" />
		
		<!-- 生成流程图的字体 -->
		<property name="activityFontName" value="宋体" />

		<!-- 缓存支持
		<property name="processDefinitionCache">
			<bean class="me.kafeitu.demo.activiti.util.cache.DistributedCache" />
        </property>-->

		<!-- 自动部署 -->
		<property name="deploymentResources">
			<list>
				<value>classpath*:/deployments/*</value>
			</list>
		</property>
	</bean>

	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="formService" factory-bean="processEngine" factory-method="getFormService" />
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
<!-- Activiti end -->
</beans>
